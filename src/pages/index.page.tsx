import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState } from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import { PlayableCards, PlayableCardType } from '@/features/game/cards'
import { ResolvedResult } from '@/features/resolvers/types'
import { GameBoardForm, GameBoardFormValues } from './index/GameBoardForm'
import { StatusForm, StatusFormValues } from './index/StatusForm'
import { resolve } from '@/features/resolvers/resolver'
import { Board } from '@/features/game/board'
import { fromFormValue } from './index/fromFormValue'

export type FormValues = GameBoardFormValues & StatusFormValues

export default function Home() {
  const form = useForm<FormValues>()
  const [result, setResult] = useState<ResolvedResult | null>(null)
  const [applied, setApplied] = useState(false)

  const onSubmit = (formValues: FormValues) => {
    const game = fromFormValue(formValues)
    console.log(game)
    const result = resolve(game)
    console.log(result)
    setResult(result)
    setApplied(false)
  }

  const onApply = () => {
    if (!result) {
      window.alert('結果がありません')
      return
    }
    const type = result[0].purchase[0].type
    const oldValue = form.getValues()[type]
    form.setValue(`${type}`, {
      remainingCount: oldValue.remainingCount - 1,
      hasCount: oldValue.hasCount + 1
    })
    setApplied(true)
  }

  return (
    <>
      <Head>
        <title>限界都市AI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>限界都市AI</h1>
        <h2>盤面状況入力</h2>
        <FormProvider {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <StatusForm />
            <GameBoardForm />
            <button type="submit">結果を見る</button> ※AIがどれを買うべきかを示してくれます <br />
            <button type="button" onClick={onApply} disabled={applied}>
              {applied ? '反映済み ' : '結果を反映'}
            </button>{' '}
            ※一番評価の高かったカードを買ったことにし、枚数に反映します。
          </form>
        </FormProvider>

        <h2>判定結果</h2>
        {result && (
          <ul>
            {result.map((r) => (
              <li key={r.purchase[0].type}>
                評価値={r.eval};
                {r.purchase.map((p) => (
                  <span key={p.type}>{p.jpName};</span>
                ))}
              </li>
            ))}
          </ul>
        )}
      </main>
    </>
  )
}
